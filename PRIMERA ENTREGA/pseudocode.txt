Root Existence (Root Existence Check)
Define a and b as the boundaries of the interval.
Define fun as the function to check.
Simplify the function using a symbolic expression.
Compute fa as the value of the function at a.
Compute fb as the value of the function at b.
If the product fa * fb is less than 0, there is a sign change, indicating the existence of a root. Return true.
If not, there is no root in the interval. Return false.

Incremental Search
Define the function f and the initial value x0.
Define a small step delta to increment the search.
Define N as the number of steps for the search.
Start a loop for i from 0 to N-1.
Compute x1 as x0 + delta.
If f(x0) * f(x1) is less than 0, it means there is a root between x0 and x1.
Print this information.
Update x0 to be x1.
End the loop.

Backward Substitution
Define M as the augmented matrix of coefficients and constants.
Determine n as the number of equations (rows in M).
Initialize x as a zero array of length n.
Set the last value of x[n-1] as M[n-1, n] / M[n-1, n-1].
For each row i from n-2 down to 0:
Create an auxiliary array aux consisting of 1 and the values of x[i+1:n].
Create another auxiliary array aux1 consisting of the M[i, n] value followed by negative values of M[i, i+1:n].
Update x[i] as the dot product of aux and aux1 divided by M[i, i].
Return the array x.

Bisection Method
Set new_a and new_b as the starting values of the interval.
If there is no sign change between f(new_a) and f(new_b), print that it does not change signs.
Simplify the function expression and define f.
Initialize cumple to 0 (convergence flag).
Initialize iteration to 0.
Initialize an empty list table to store iteration data.
Initialize error to 0.
Start a while loop:
If cumple is 0 and iteration is less than 100, perform the following steps:
Compute c as the midpoint of new_a and new_b.
Compute fa, fb, and fc as the function values at new_a, new_b, and c respectively.
If this is the first iteration, append the iteration data to table.
Otherwise, compute the absolute error between c and c_previous. If the error is less than or equal to the tolerance, set cumple to 1.
Append the iteration data to table.
If fa * fc is less than 0, update new_b to c.
If fc * fb is less than 0, update new_a to c.
If the loop terminates and cumple is 1, print the results table.
If there is no convergence within the maximum iterations, print "No convergence within the maximum number of iterations".
End the loop.

Regla Falsa (False Position Method)
Define the function f, a, and b as the interval.
If there is no sign change between f(a) and f(b), print that it does not change signs.
Compute c as the false position estimate using the formula c = (f(b)*a - f(a)*b) / (f(b) - f(a)).
If f(c) is 0, print the root c.
Initialize cumple to 0 (convergence flag).
Initialize iteration to 1.
If f(a) * f(c) is less than 0, set new_a to a and new_b to c; otherwise, set new_a to c and new_b to b.
Store the first iteration data in table.
Start a while loop:
If cumple is 0 and iteration is less than N, perform the following:
Compute a new c using the formula c = (f(new_b)*new_a - f(new_a)*new_b) / (f(new_b) - f(new_a)).
Compute the error as the absolute difference between c and c_previous.
If the error is less than or equal to the tolerance, set cumple to 1.
Append the iteration data to table.
Update new_a and new_b based on the sign of f(a) * f(c).
If the loop ends and cumple is 1, print the results table.
If there is no convergence, print "No convergence within the maximum number of iterations".
End the loop.

Punto Fijo (Fixed Point Method)
Define the functions f and g (the fixed-point iteration function).
Define x0 as the initial guess.
Initialize cumple to 0 (convergence flag).
Initialize iteration to 1.
Start a loop:
If cumple is 0 and iteration is less than N, perform the following:
Compute g(x0) and f(x0).
Compute the error as the absolute difference between x0 and x0_anterior.
If the error is less than the tolerance, set cumple to 1.
Append the iteration data to table.
Update x0_anterior to x0.
Set x0 to g(x0).
If the loop ends and cumple is 1, print the results table.
If there is no convergence, print "No convergence within the maximum number of iterations".

Newton Method
Define x0 as the initial guess and tolerance as the acceptable error.
Simplify the function f and compute its derivative df.
Initialize cumple to 0 (convergence flag).
Initialize iteration to 0.
Start a while loop:
If cumple is 0 and iteration is less than N, perform the following:
Compute f(x0) and df(x0).
If df(x0) is 0, print an error message and stop.
Compute the new value x0 as x0 - (f(x0) / df(x0)).
Compute the error as the absolute difference between the new and previous x0.
If the error is less than or equal to the tolerance, set cumple to 1.
Append the iteration data to table.
If the loop ends and cumple is 1, print the results table.
If there is no convergence, print "No convergence within the maximum number of iterations".
End the loop.

Secant Method
Define x0 and x1 as the initial guesses and tolerance as the acceptable error.
Simplify the function f.
Initialize cumple to 0 (convergence flag).
Initialize iteration to 2 (starting with two initial guesses).
Start a while loop:
If cumple is 0 and iteration is less than N, perform the following:
Compute the new estimate x1 using the secant formula.
Compute the error as the absolute difference between x1 and x0.
If the error is less than or equal to the tolerance, set cumple to 1.
Append the iteration data to table.
Update x0 and x1 for the next iteration.
If the loop ends and cumple is 1, print the results table.
If there is no convergence, print "No convergence within the maximum number of iterations".
End the loop.

Multiple Roots Method (Multiple Root Finding)
Initialize variables:
Define xi as the initial guess.
Define history as an empty list to store iteration history.
Define cumple as a flag (0 for no convergence, 1 for convergence).
Define h, dh, ddh as the simplified versions of the function, first derivative, and second derivative respectively.
Start loop for N iterations:
Compute values:
Calculate hi as the value of the function at xi using h(xi).
Calculate dhi as the value of the first derivative at xi using dh(xi).
Calculate ddhi as the value of the second derivative at xi using ddh(xi).
Apply formula for multiple roots:
Calculate the new estimate xi_new using the formula:
xi_new = xi - ( (hi * dhi) / (dhi^2 - hi * ddhi) )
Compute error:
Calculate the absolute error as error = |xi_new - xi|.
Update history:
Store the current iteration index, xi, hi, and error in history.
Check for convergence:
If the error is less than the tolerance, set cumple = 1 and break the loop.
Update guess:
Set xi = xi_new.
Convergence Check:
If cumple == 1, print "Multiple roots" and display the results table.
If not, print "No convergence within the maximum number of iterations".

Gaussian Simple Elimination Method
Initialize variables:
Define A as the coefficient matrix.
Define b as the vector of constants.
Define n as the number of equations (size of A).
Define M as the augmented matrix formed by combining A and b.

Forward Elimination:
For each column i from 0 to n-1:
For each row j from i+1 to n-1:
If the element M[j, i] is not zero, eliminate it by updating row j using:
M[j, i:n+1] = M[j, i:n+1] - (M[j, i] / M[i, i]) * M[i, i:n+1]
Display the updated matrix after each step.
Backward Substitution:
Call the sustReg method to solve for the unknowns.
Output the result:
Print the solution vector x after applying backward substitution.

Gaussian Elimination with Partial Pivoting
Initialize variables:
Define A as the coefficient matrix and b as the constant vector.
Define n as the number of equations (size of A).
Define M as the augmented matrix.
Forward Elimination with Partial Pivoting:
For each column i from 0 to n-1:
Find the maximum absolute value in column i from row i+1 to n (partial pivoting).
If necessary, swap rows to make the largest value the pivot element.
For each row j from i+1 to n-1, eliminate the element M[j, i] using the formula:
M[j, i:n+1] -= (M[j, i] / M[i, i]) * M[i, i:n+1]
Display the updated matrix after each step.
Backward Substitution:
Call the sustReg method to solve for the unknowns.
Output the result:
Print the solution vector x after applying backward substitution.

Gaussian Elimination with Total Pivoting
Initialize variables:
Define A as the coefficient matrix and b as the constant vector.
Define n as the number of equations (size of A).
Define M as the augmented matrix.
Define cambi as a list to keep track of column swaps.
Forward Elimination with Total Pivoting:
For each column i from 0 to n-1:
Find the largest value in the submatrix starting at M[i, i] using total pivoting.
If necessary, swap both rows and columns to make the largest element the pivot.
For each row j from i+1 to n-1, eliminate the element M[j, i] using the formula:
M[j, i:n+1] -= (M[j, i] / M[i, i]) * M[i, i:n+1]
Display the updated matrix after each step.
Backward Substitution:
Call the sustReg method to solve for the unknowns.
Reorder the solution:
Apply the column swaps from cambi to reorder the solution vector.
Output the result:
Print the solution vector x after applying backward substitution.

pseudocode = """

Linear Spline (trazlin):
Convert X and Y lists to NumPy arrays.
Define the length n of X (number of data points).
Set the number of unknowns m = 2 * (n - 1) for linear splines.
Initialize matrix A of size (m, m) and vector b of size m.
Fill the interpolation conditions for each point.
 For i = 0 to n-2:
     A[i, 2*i:2*i+2] = [X[i+1], 1]
     b[i] = Y[i+1]
 Set A[n-1, 0:2] = [X[0], 1] and b[n-1] = Y[0].
Fill the continuity conditions for each point where two splines meet.
 For i = 1 to n-2:
     A[n-1+i, 2*i-2:2*i+2] = [X[i], 1, -X[i], -1]
     b[n-1+i] = 0.
Solve the system A * S = b using linear algebra to find the coefficients.
Return the coefficients as a list of tuples [(a, b), ...] for each linear segment.

Quadratic Spline (trazcuad):
Convert X and Y lists to NumPy arrays.
Define the length n of X (number of data points).
Set the number of unknowns m = 3 * (n - 1) for quadratic splines.
Initialize matrix A of size (m, m) and vector b of size m.
Fill the interpolation conditions for each point.
 For i = 0 to n-2:
     A[i, 3*i:3*i+3] = [X[i+1]^2, X[i+1], 1]
     b[i] = Y[i+1]
 Set A[n-1, 0:3] = [X[0]^2, X[0], 1] and b[n-1] = Y[0].
Fill the continuity conditions to match first derivatives at segment boundaries.
 For i = 1 to n-2:
     A[n-1+i, 3*i-3:3*i+3] = [X[i]^2, X[i], 1, -X[i]^2, -X[i], -1]
     b[n-1+i] = 0.
Fill the smoothness conditions to match second derivatives at segment boundaries.
 For i = 1 to n-2:
     A[2*(n-1)-1+i, 3*i-3:3*i+3] = [2*X[i], 1, 0, -2*X[i], -1, 0]
     b[2*(n-1)-1+i] = 0.
Apply boundary conditions (second derivative is zero at endpoints).
 Set A[-1, 0] = 2 and b[-1] = 0.
Solve the system A * S = b to find the spline coefficients.
 Return the coefficients as a list of tuples [(a, b, c), ...] for each quadratic segment.

Cubic Spline (trazcub):
Convert X and Y lists to NumPy arrays.
Define the length n of X (number of data points).
Set the number of unknowns m = 4 * (n - 1) for cubic splines.
Initialize matrix A of size (m, m) and vector b of size m.
Fill the interpolation conditions for each point.
 For i = 0 to n-2:
     A[row, 4*i:4*i+4] = [X[i]^3, X[i]^2, X[i], 1]
     b[row] = Y[i]
     row += 1
     A[row, 4*i:4*i+4] = [X[i+1]^3, X[i+1]^2, X[i+1], 1]
     b[row] = Y[i+1]
     row += 1
Fill the continuity conditions to match first derivatives at segment boundaries.
 For i = 1 to n-2:
     A[row, 4*(i-1):4*(i+1)] = [3*X[i]^2, 2*X[i], 1, 0, -3*X[i]^2, -2*X[i], -1, 0]
     b[row] = 0
     row += 1
Fill the smoothness conditions to match second derivatives at segment boundaries.
 For i = 1 to n-2:
     A[row, 4*(i-1):4*(i+1)] = [6*X[i], 2, 0, 0, -6*X[i], -2, 0, 0]
     b[row] = 0
     row += 1
Apply natural spline boundary conditions (second derivative is zero at endpoints).
 Set A[row, 0:2] = [6*X[0], 2] and b[row] = 0.
 Set A[row, -4:-2] = [6*X[-1], 2] and b[row] = 0.
Solve the system A * S = b to find the cubic spline coefficients.
 Return the coefficients as a list of tuples [(a, b, c, d), ...] for each cubic segment.
"""